<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.1.1 (Build 107U)" ts="2016-08-20 02:07:59">
<Class name="Serializer.Serializable.Object">
<Super>%RegisteredObject</Super>
<TimeChanged>64132,42288</TimeChanged>
<TimeCreated>64127,56854.553728</TimeCreated>

<Parameter name="internalProp">
<Type>%String</Type>
<Expression>$lb("%%OID","%data","%prop")</Expression>
</Parameter>

<Property name="%data">
<Type>%Object</Type>
</Property>

<Property name="%prop">
<MultiDimensional>1</MultiDimensional>
</Property>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..%data = ##class(%Object).%New()
	for i=1:1:$ll(..GetProperties()){
		set ..%prop($li(..GetProperties(),i)) = ""
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetProperties">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set ret = ""
	for i = 1:1:%compiledclass.Properties.Count(){
		set prop = %compiledclass.Properties.GetAt(i)
		if ($lf(..#internalProp, prop.Name)>0) continue
		set ret = ret_""""_prop.Name_""","
	}
	if (ret'=""){
		set ret = "$lb("_$e(ret,1,*-1)_")"
	}
	else {
		set ret = """"""
	}
	do %code.WriteLine(" return "_ret)
]]></Implementation>
</Method>

<Method name="%DispatchGetProperty">
<Description><![CDATA[
 Property dispatch method to catch references to 
 virtual properties. <br>
 This should not be called directly.<br>]]></Description>
<Internal>1</Internal>
<FormalSpec>propertyName:%String(MAXLEN="")</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	return $property(..%data, propertyName)
]]></Implementation>
</Method>

<Method name="%DispatchSetProperty">
<Description><![CDATA[
 Property dispatch method to catch references to 
 virtual properties.<br>
 This should not be called directly.<br>]]></Description>
<Internal>1</Internal>
<FormalSpec>propertyName:%String(MAXLEN=""),value:%String(MAXLEN="")</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[    set $property(..%data, propertyName) = value
]]></Implementation>
</Method>

<Method name="GetStaticIterator">
<ClassMethod>1</ClassMethod>
<ReturnType>StaticPropertyIterator</ReturnType>
<Implementation><![CDATA[	ret ##class(StaticPropertyIterator).%New(..GetProperties())
]]></Implementation>
</Method>

<Method name="GetIterator">
<ReturnType>DynamicPropertyIterator</ReturnType>
<Implementation><![CDATA[	ret ##class(DynamicPropertyIterator).%New(..GetProperties(), ..%data.$getIterator(), $this)
]]></Implementation>
</Method>

<Method name="HasProperty">
<FormalSpec>propertyName:%String(MAXLEN="")</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return $data(..%prop(propertyName)) || ..%data.$isDefined(propertyName)
]]></Implementation>
</Method>

<Method name="Convert">
<FormalSpec>className:%String</FormalSpec>
<Implementation><![CDATA[
	set obj = $classmethod(className, "%New")
	set it = ..GetIterator()
	while (it.GetNext(.key, .val)){
		set propId = className_"||"_key
		if ('$isobject(val)){
			set $property(obj, key) = val
		}
		elseif (val.%IsA("Serializer.Serializable.Object")){
			if (##class(%Dictionary.PropertyDefinition).%ExistsId(propId)){
				set prop = ##class(%Dictionary.PropertyDefinition).%OpenId(propId)
				set $property(obj, key) = val.Convert(prop.Type)
			}
			else{
				set $property(obj, key) = val
			}
		}
		else{
			set $property(obj, key) = val
		}
	}
	return obj
]]></Implementation>
</Method>
</Class>
</Export>
