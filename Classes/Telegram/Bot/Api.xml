<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Telegram.Bot.Api">
<IncludeCode>Src.Utils.Macro</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>64152,43802.402025</TimeCreated>

<Method name="SendWebRequest">
<Description>
Sends a web request to API Telegram</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>method:%String,requestData:Telegram.DTO.Request.BaseRequest,type:%String</FormalSpec>
<Implementation><![CDATA[
	set settings = ##class(Telegram.Bot.Settings).%New()
	
	/// Configuration request
	set request = ##class(%Net.HttpRequest).%New()
	set request.ContentType = "multipart/form-data; boundary="
	set request.Server = "api.telegram.org"
	set request.Https = $$$YES
	set request.SSLConfiguration = settings.GetValue("ssl")
	set request.Location = "bot"_settings.GetValue("token")
	
	/// The content of the request data
	set RootMIMEPart = requestData.GenerateMultiformData()
	if RootMIMEPart.Parts.Count() '= 0 {
		set writer = ##class(%Net.MIMEWriter).%New()
		do writer.OutputToStream(request.EntityBody)
		do writer.WriteMIMEBody(RootMIMEPart)
		set request.ContentType = "multipart/form-data; boundary="_RootMIMEPart.Boundary
	}
	
	/// Send request
	do request.Get(request.Location_"/"_method)
	if (settings.GetValue("debug")) {
		do request.HttpResponse.OutputToDevice()
	}
	
	/// Deserialize the response
	set deserializer = ##class(Serializer.JsonDeserializer).%New()
	set response = deserializer.Deserialize(request.HttpResponse.Data)
 
	if (response.ok) {
		if ($ClassName(response.result) = "%Library.DynamicArray") && (type '= "") {
			set result = ##class(%ListOfObjects).%New()
			set iter = response.result.%GetIterator()
	   		while iter.%GetNext(.key , .value) {
		   		do result.Insert(value.Convert(type))
	   		}
	   		return result
		}
		if ($IsObject(response.result)) && (type '= "") {
			return response.result.Convert(type)
		}
		return response.result
	}
	else {
		set exception = ##class(Telegram.Bot.ResponseException).%New()
		set exception.Name = "Response"
		set exception.Method = method
		set exception.Data = requestData
		set exception.Description = response.description
		set exception.Code = response."error_code"
		//if $IsObject(exception.parameters) {
		//	set exception.Parameters = response.parameters.Convert("Telegram.DTO.Objects.ResponseParameters")
		//}
		
		return exception
	}
]]></Implementation>
</Method>

<Method name="ProcessUpdate">
<Description>
Specifies the type of updates and call the appropriate handler method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%String,update:Telegram.DTO.Objects.Update</FormalSpec>
<Implementation><![CDATA[
	if $IsObject(update.message) {
		do $classmethod(classname, "OnMessage", update.message)
	}
	if $IsObject(update."edited_message") {
		do $classmethod(classname, "OnEditedMessage", update."edited_message")
	}
	if $IsObject(update."inline_query") {
		do $classmethod(classname, "OnInlineQuery", update."inline_query")
	}
	if $IsObject(update."chosen_inline_result") {
		do $classmethod(classname, "OnChosenInlineResult", update."chosen_inline_result")
	}
	if $IsObject(update."callback_query") {
		do $classmethod(classname, "OnCallbackQuery", update."callback_query")
	}
]]></Implementation>
</Method>

<Method name="ThreadLocalhook">
<Description>
Sends requests to receive updates from API Telegram</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%String</FormalSpec>
<Implementation><![CDATA[
	try {
		lock +^Telegram.Bot.Lock:2
    	if ($TEST = 0) {
    		$$$throw("Failed to create a thread")
    	}
    	      
		set settings = ##class(Telegram.Bot.Settings).%New()
		set request = ##class(Telegram.Bot.Api).%New()
		
		while settings.GetValue("local") {
			set response = request.GetUpdates(settings.GetValue("last") + 1)

			for i = 1:1:response.Count() {
				set update = response.GetAt(i)
				do ..ProcessUpdate(classname, update)			
				do settings.SetValue("last", update."update_id")
			}
			
			HANG settings.GetValue("interval")
		}
		
		do ..DeleteLocalhook()
	} catch(ex) {
		do ..DeleteLocalhook()
	}
]]></Implementation>
</Method>

<Method name="SetLocalhook">
<Description>
Use this method to the incoming get updates, referring to the telegram's API, with the specified interval.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%String</FormalSpec>
<Implementation><![CDATA[
	do ##class(Telegram.Bot.Settings).SetValue("local", $$$YES)
	do ..DeleteWebhook()

	lock +^Telegram.Bot.Lock:0
    if $TEST {
      job ..ThreadLocalhook(classname)
      lock -^Telegram.Bot.Lock
    }
    else {
      $$$throw("Thread already created")
    }
]]></Implementation>
</Method>

<Method name="DeleteLocalhook">
<Description>
Use this method to stop SetLocalhook()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	lock -^Telegram.Bot.Lock
	do ##class(Telegram.Bot.Settings).SetValue("local", $$$NO)
]]></Implementation>
</Method>

<Method name="AnswerCallbackQuery">
<Description>
Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>callbackQueryId:%String,text:%String,showAlert:%Boolean,url:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.AnswerCallbackQuery).%New()
	set request."callback_query_id" = callbackQueryId
	set request.text = $Get(text)
	set request."show_alert" = $Get(showAlert)
	set request.url = $Get(url)
	
	return ..SendWebRequest("answerCallbackQuery", request)
]]></Implementation>
</Method>

<Method name="AnswerInlineQuery">
<Description>
Use this method to send answers to an inline query. On success, True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inlineQueryId:%String,results:%ListOfObjects,cacheTime:%Integer,isPersonal:%Boolean,nextOffset:%String,switchPmText:%String,switchPmParameter:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.AnswerInlineQuery).%New()
	set request."inline_query_id" = inlineQueryId
    set request.results = results
    set request."cache_time" = $Get(cacheTime)
    set request."is_personal" = $Get(isPersonal)
    set request."next_offset" = $Get(nextOffset)
    set request."switch_pm_text" = $Get(switchPmText)
    set request."switch_pm_parameter" = $Get(switchPmParameter)
    
	return ..SendWebRequest("answerInlineQuery", request)
]]></Implementation>
</Method>

<Method name="EditMessageCaption">
<Description>
Use this method to edit captions of messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,messageId:%String,inlineMessageId:%String,caption:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.EditMessageCaption).%New()
	set request."chat_id" = $Get(chatId)
    set request."message_id" = $Get(messageId)
    set request."inline_message_id" = $Get(inlineMessageId)
    set request.caption = $Get(caption)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("editMessageCaption", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="EditMessageReplyMarkup">
<Description>
Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,messageId:%String,inlineMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.EditMessageReplyMarkup).%New()
	set request."chat_id" = $Get(chatId)
    set request."message_id" = $Get(messageId)
    set request."inline_message_id" = $Get(inlineMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("editMessageReplyMarkup", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="EditMessageText">
<Description>
Use this method to edit text messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,messageId:%String,inlineMessageId:%String,text:%String,parseMode:%String,disableWebPagePreview:%Boolean,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.EditMessageText).%New()
	set request."chat_id" = $Get(chatId)
    set request."message_id" = $Get(messageId)
    set request."inline_message_id" = $Get(inlineMessageId)
    set request.text = text
    set request."parse_mode" = $Get(parseMode)
    set request."disable_web_page_preview" = $Get(disableWebPagePreview)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("editMessageText", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="ForwardMessage">
<Description>
Use this method to forward messages of any kind. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,fromChatId:%String,disableNotification:%Boolean,messageId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.ForwardMessage).%New()
	set request."chat_id" = chatId
    set request."from_chat_id" = fromChatId
    set request."disable_notification" = $Get(disableNotification)
    set request."message_id" = messageId
	
	return ..SendWebRequest("forwardMessage", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="GetChat">
<Description>
Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Chat</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetChat).%New()
	set request."chat_id" = chatId
	
	return ..SendWebRequest("getChat", request, "Telegram.DTO.Objects.Chat")
]]></Implementation>
</Method>

<Method name="GetChatAdministrators">
<Description>
Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetChatAdministrators).%New()
	set request."chat_id" = chatId
	
	return ..SendWebRequest("getChatAdministrators", request, "Telegram.DTO.Objects.ChatMember")
]]></Implementation>
</Method>

<Method name="GetChatMember">
<Description>
Use this method to get information about a member of a chat. Returns a ChatMember object on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,userId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ChatMember</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetChatMember).%New()
	set request."chat_id" = chatId
	set request."user_id" = userId
	
	return ..SendWebRequest("getChatMember", request, "Telegram.DTO.Objects.ChatMember")
]]></Implementation>
</Method>

<Method name="GetChatMembersCount">
<Description>
Use this method to get the number of members in a chat. Returns Int on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetChatMembersCount).%New()
	set request."chat_id" = chatId
	
	return ..SendWebRequest("getChatMembersCount", request)
]]></Implementation>
</Method>

<Method name="GetFile">
<Description><![CDATA[
Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://request.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.File</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetFile).%New()
	set request."file_id" = fileId
	
	return ..SendWebRequest("getFile", request, "Telegram.DTO.Objects.File")
]]></Implementation>
</Method>

<Method name="GetGameHighScores">
<Description>
Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userId:%String,chatId:%String,messageId:%String,inlineMessageId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetGameHighScores).%New()
	set request."user_id" = userId
	set request."chat_id" = $Get(chatId)
	set request."message_id" = $Get(messageId)
	set request."inline_message_id" = $Get(inlineMessageId)
	
	return ..SendWebRequest("getMe", request, "Telegram.DTO.Objects.GameHighScore")
]]></Implementation>
</Method>

<Method name="GetMe">
<Description>
A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>Telegram.DTO.Objects.User</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetMe).%New()
	
	return ..SendWebRequest("getMe", request, "Telegram.DTO.Objects.User")
]]></Implementation>
</Method>

<Method name="GetUpdates">
<Description>
Use this method to receive incoming updates using long polling (wiki). An Array of Update objects is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>offset:%Integer,limit:%Integer,timeout:%Integer</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetUpdates).%New()
    set request.offset = $Get(offset)
    set request.limit = $Get(limit)
    set request.timeout = $Get(timeout)
    
    return ..SendWebRequest("getUpdates", request, "Telegram.DTO.Objects.Update")
]]></Implementation>
</Method>

<Method name="GetUserProfilePhotos">
<Description>
Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userId:%String,offset:%Integer,limit:%Integer</FormalSpec>
<ReturnType>Telegram.DTO.Objects.UserProfilePhotos</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetUserProfilePhotos).%New()
	set request."user_id" = userId
    set request.offset = $Get(offset)
    set request.limit = $Get(limit)
    
	return ..SendWebRequest("getUserProfilePhotos", request, "Telegram.DTO.Objects.UserProfilePhotos")
]]></Implementation>
</Method>

<Method name="GetWebhookInfo">
<Description>
Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>Telegram.DTO.Objects.WebhookInfo</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.GetWebhookInfo).%New()
    
	return ..SendWebRequest("getWebhookInfo", request, "Telegram.DTO.Objects.WebhookInfo")
]]></Implementation>
</Method>

<Method name="KickChatMember">
<Description>
Use this method to kick a user from a group or a supergroup. In the case of supergroups, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the group for this to work. Returns True on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,userId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.KickChatMember).%New()
	set request."chat_id" = chatId
	set request."user_id" = userId
    
	return ..SendWebRequest("kickChatMember", request)
]]></Implementation>
</Method>

<Method name="LeaveChat">
<Description>
Use this method for your bot to leave a group, supergroup or channel. Returns True on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.LeaveChat).%New()
	set request."chat_id" = chatId
    
	return ..SendWebRequest("leaveChat", request)
]]></Implementation>
</Method>

<Method name="SendAudio">
<Description>
Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,audio:%String,caption:%String,duration:%Integer,performer:%String,title:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendAudio).%New()
	set request."chat_id" = chatId
	set request.audio = audio
	set request.caption = $Get(caption)
	set request.duration = $Get(duration)
	set request.performer = $Get(performer)
	set request.title = $Get(title)
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
    
	return ..SendWebRequest("sendAudio", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendChatAction">
<Description>
Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,action:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendChatAction).%New()
	set request."chat_id" = chatId
    set request.action = action
    
	return ..SendWebRequest("sendChatAction", request)
]]></Implementation>
</Method>

<Method name="SendContact">
<Description>
Use this method to send phone contacts. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,phoneNumber:%String,firstName:%String,lastName:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendContact).%New()
    set request."phone_number" = phoneNumber
    set request."first_name" = $Get(firstName)
    set request."last_name" = $Get(lastName)
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendContact", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendDocument">
<Description>
Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,document:%String,caption:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendDocument).%New()
    set request."chat_id" = chatId
    set request.document = document
    set request.caption = $Get(caption)
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendDocument", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendGame">
<Description>
Use this method to send a game. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,gameShortName:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendGame).%New()
	set request."chat_id" = chatId
    set request."game_short_name" = gameShortName
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendGame", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendLocation">
<Description>
Use this method to send point on the map. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,latitude:%Float,longitude:%Float,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendLocation).%New()
	set request."chat_id" = chatId
    set request.latitude = latitude
    set request.longitude = longitude
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendLocation", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendMessage">
<Description>
Use this method to send text messages. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,text:%String,parseMode:%String,disableWebPagePreview:%Boolean,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendMessage).%New()
	set request."chat_id" = chatId
    set request.text = text
    set request."parse_mode" = $Get(parseMode)
    set request."disable_web_page_preview" = $Get(disableWebPagePreview)
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendMessage", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendPhoto">
<Description>
Use this method to send photos. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,photo:%String,caption:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendPhoto).%New()
	set request."chat_id" = chatId
    set request.photo = photo
    set request.caption = $Get(caption)
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendPhoto", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendSticker">
<Description>
Use this method to send .webp stickers. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,sticker:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendSticker).%New()
	set request."chat_id" = chatId
    set request.sticker = sticker
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendSticker", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendVenue">
<Description>
Use this method to send information about a venue. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,latitude:%String,longitude:%String,title:%String,address:%String,foursquareId:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendVenue).%New()
	set request."chat_id" = chatId
    set request.latitude = latitude
    set request.longitude = longitude
    set request.title = title
    set request.address = address
    set request."foursquare_id" = $Get(foursquareId)
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendVenue", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendVideo">
<Description>
Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,video:%String,duration:%String,width:%String,height:%String,caption:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendVideo).%New()
	set request."chat_id" = chatId
    set request.video = video
    set request.duration = $Get(duration)
    set request.width = $Get(width)
    set request.height = $Get(height)
    set request.caption = $Get(caption)
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendVideo", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SendVoice">
<Description>
Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,voice:%String,caption:%String,duration:%String,disableNotification:%Boolean,replyToMessageId:%String,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SendVoice).%New()
	set request."chat_id" = chatId
	set request.caption = caption
    set request.voice= voice
    set request.duration = $Get(duration)
    set request."disable_notification" = $Get(disableNotification)
    set request."reply_to_message_id" = $Get(replyToMessageId)
    set request."reply_markup" = $Get(replyMarkup)
	
	return ..SendWebRequest("sendVoice", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SetGameScore">
<Description>
Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns True. Returns an error, if the new score is not greater than the user's current score in the chat.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userId:%String,score:%Integer,chatId:%String,messageId:%String,inlineMessageId:%String,editMessage:%Boolean</FormalSpec>
<ReturnType>Telegram.DTO.Objects.Message</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SetGameScore).%New()
	set request."user_id" = userId
	set request.score = score
	set request."chat_id" = $Get(chatId)
	set request."message_id" = $Get(messageId)
	set request."inline_message_id" = $Get(inlineMessageId)
	set request."edit_message" = $Get(editMessage)

	return ..SendWebRequest("setGameScore", request, "Telegram.DTO.Objects.Message")
]]></Implementation>
</Method>

<Method name="SetWebhook">
<Description>
Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String,certificate:%FileBinaryStream</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SetWebhook).%New()
	set request.url = $Get(url)
    set request.certificate = $Get(certificate)
	
	do ..DeleteLocalhook()
	return ..SendWebRequest("setWebhook", request)
]]></Implementation>
</Method>

<Method name="DeleteWebhook">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.SetWebhook).%New()
	return ..SendWebRequest("setWebhook", request)
]]></Implementation>
</Method>

<Method name="UnbanChatMember">
<Description>
Use this method to unban a previously kicked user in a supergroup. The user will not return to the group automatically, but will be able to join via link, etc. The bot must be an administrator in the group for this to work. Returns True on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,userId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set request = ##class(Telegram.DTO.Request.UnbanChatMember).%New()
	set request."chat_id" = chatId
	set request."user_id" = userId
	
	return ..SendWebRequest("unbanChatMember", request)
]]></Implementation>
</Method>
</Class>
</Export>
