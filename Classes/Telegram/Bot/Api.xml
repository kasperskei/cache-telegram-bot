<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Telegram.Bot.Api">
<IncludeCode>Src.Utils.Macro</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>64152,43802.402025</TimeCreated>

<Method name="SendWebRequest">
<Description>
Sends a web request to API Telegram</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>method:%String,RootMIMEPart:%Net.MIMEPart</FormalSpec>
<Implementation><![CDATA[
	try {
		set settings = ##class(Telegram.Bot.Settings).%New()
		if 'Get(settings.GetValue("ssl")) {
			throw ##class(%Exception.General).%New("Don't property",,,"The property is missing with the code ""ssl""")
		} 
		if 'Get(settings.GetValue("token")) {
			throw ##class(%Exception.General).%New("Don't property",,,"The property is missing with the code ""token""")
		} 
		
		set request = ##class(%Net.HttpRequest).%New()
		set request.ContentType = "multipart/form-data; boundary="
		set request.Server = "api.telegram.org"
		set request.Https = $$$YES
		set request.SSLConfiguration = settings.GetValue("ssl")
		set request.Location = settings.GetValue("token")

		if RootMIMEPart.Parts.Count() '= 0 {
			set writer = ##class(%Net.MIMEWriter).%New()
			do writer.OutputToStream(request.EntityBody)
			do writer.WriteMIMEBody(RootMIMEPart)
			set request.ContentType = "multipart/form-data; boundary="_RootMIMEPart.Boundary
		}

		do request.Get(request.Location_"/"_method, 0)
		do request.HttpResponse.OutputToDevice()
		
		return request.HttpResponse.Data
	}
	catch ex {
		throw ex
	}
]]></Implementation>
</Method>

<Method name="ProcessUpdate">
<Description>
Specifies the type of updates and call the appropriate handler method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>handler:Telegram.Bot.AbstractHandler,update:Telegram.DTO.Objects.Update</FormalSpec>
<Implementation><![CDATA[
	if $IsObject(update.message) {
		do handler.OnMessage(update.message)
	}
	if $IsObject(update."edited_message") {
		do handler.OnEditedMessage(update."edited_message")
	}
	if $IsObject(update."inline_query") {
		do handler.OnInlineQuery(update."inline_query")
	}
	if $IsObject(update."chosen_inline_result") {
		do handler.OnChosenInlineResult(update."chosen_inline_result")
	}
	if $IsObject(update."callback_query") {
		do handler.OnCallbackQuery(update."callback_query")
	}
]]></Implementation>
</Method>

<Method name="ThreadLocalhook">
<Description>
Sends requests to receive updates from API Telegram</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>handler:Telegram.Bot.AbstractHandler</FormalSpec>
<Implementation><![CDATA[
	set settings = ##class(Telegram.Bot.Settings).%New()
	set api = ##class(Telegram.Bot.Api).%New()
	while settings.GetValue("local") {
		set response = api.GetUpdates(settings.GetValue("last") + 1)
		
		for i = 1:1:response.result.Count() {
			set update = response.result.GetAt(i)
			job ##class(Telegram.Bot.Api).ProcessUpdate(handler, update)			
			do settings.SetValue("last", update."update_id")
		}

		HANG settings.GetValue("interval")
	}
	do ..DeleteLocalhook()
]]></Implementation>
</Method>

<Method name="SetLocalhook">
<Description>
Use this method to the incoming get updates, referring to the telegram's API, with the specified interval.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>handler:Telegram.Bot.AbstractHandler</FormalSpec>
<Implementation><![CDATA[
	do ##class(Telegram.Bot.Settings).SetValue("local", $$$YES)
	job ..DeleteWebhook()	
	job ..ThreadLocalhook(handler, multithreading)
]]></Implementation>
</Method>

<Method name="DeleteLocalhook">
<Description>
Use this method to stop SetLocalhook()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(Telegram.Bot.Settings).SetValue("local", $$$NO)
]]></Implementation>
</Method>

<Method name="AnswerCallbackQuery">
<Description>
Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>callbackQueryId:%String,text:%String,showAlert:%Boolean</FormalSpec>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.AnswerCallbackQuery).%New()
	set api."callback_query_id" = callbackQueryId
	set api.text = $Get(text)
	set api."show_alert" = $Get(showAlert)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("answerCallbackQuery", api.GenerateMultiformData()))

	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="AnswerInlineQuery">
<Description>
Use this method to send answers to an inline query. On success, True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inlineQueryId:%String,results:%ListOfObjects,cacheTime:%Integer,isPersonal:%Boolean,nextOffset:%String,switchPmText:%String,switchPmParameter:%String</FormalSpec>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.AnswerInlineQuery).%New()
	set api."inline_query_id" = inlineQueryId
    set api.results = results
    set api."cache_time" = $Get(cacheTime)
    set api."is_personal" = $Get(isPersonal)
    set api."next_offset" = $Get(nextOffset)
    set api."switch_pm_text" = $Get(switchPmText)
    set api."switch_pm_parameter" = $Get(switchPmParameter)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("answerInlineQuery", api.GenerateMultiformData()))

	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="EditMessageCaption">
<Description>
Use this method to edit captions of messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,messageId:%String,inlineMessageId:%String,caption:%String,replyMarkup:%String</FormalSpec>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.EditMessageCaption).%New()
	set api."chat_id" = $Get(chatId)
    set api."message_id" = $Get(messageId)
    set api."inline_message_id" = $Get(inlineMessageId)
    set api.caption = $Get(caption)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("editMessageCaption", api.GenerateMultiformData()))
	
	if (response.ok) && $isobject(response.result) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
		set response.result = ""
		set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
		set response.result = result
		return response
	}
	
	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="EditMessageReplyMarkup">
<Description>
Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,messageId:%String,inlineMessageId:%String,replyMarkup:%String</FormalSpec>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.EditMessageReplyMarkup).%New()
	set api."chat_id" = $Get(chatId)
    set api."message_id" = $Get(messageId)
    set api."inline_message_id" = $Get(inlineMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("editMessageReplyMarkup", api.GenerateMultiformData()))
		
	if (response.ok) && $isobject(response.result) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
		set response.result = ""
		set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
		set response.result = result
		return response
	}

	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="EditMessageText">
<Description>
Use this method to edit text messages sent by the bot or via the bot (for inline bots). On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,messageId:%String,inlineMessageId:%String,text:%String,parseMode:%String,disableWebPagePreview:%Boolean,replyMarkup:%String</FormalSpec>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.EditMessageText).%New()
	set api."chat_id" = $Get(chatId)
    set api."message_id" = $Get(messageId)
    set api."inline_message_id" = $Get(inlineMessageId)
    set api.text = text
    set api."parse_mode" = $Get(parseMode)
    set api."disable_web_page_preview" = $Get(disableWebPagePreview)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("editMessageText", api.GenerateMultiformData()))
		
	if (response.ok) && $isobject(response.result) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
		set response.result = ""
		set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
		set response.result = result
		return response
	}

	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="ForwardMessage">
<Description>
Use this method to forward messages of any kind. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,fromChatId:%String,disableNotification:%Boolean,messageId:%Integer</FormalSpec>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.ForwardMessage).%New()
	set api."chat_id" = chatId
    set api."from_chat_id" = fromChatId
    set api."disable_notification" = $Get(disableNotification)
    set api."message_id" = messageId
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("forwardMessage", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}
	
	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="GetChat">
<Description>
Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.GetChat).%New()
	set api."chat_id" = chatId
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("getChat", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Chat")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="GetChatAdministrators">
<Description>
Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.GetChatAdministrators).%New()
	set api."chat_id" = chatId
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("getChatAdministrators", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = ##class(%ListOfObjects).%New()
		set iter = response.result.$getIterator()
   		while iter.$getNext(.key , .value) {
	   		do result.Insert(value.Convert("Telegram.DTO.Objects.ChatMember"))
   		}
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="GetChatMember">
<Description>
Use this method to get information about a member of a chat. Returns a ChatMember object on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,userId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.GetChatMember).%New()
	set api."chat_id" = chatId
	set api."user_id" = userId
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("getChatMember", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.ChatMember")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="GetChatMembersCount">
<Description>
Use this method to get the number of members in a chat. Returns Int on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.GetChatMembersCount).%New()
	set api."chat_id" = chatId
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("getChatMembersCount", api.GenerateMultiformData()))
	
	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="GetFile">
<Description><![CDATA[
Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.GetFile).%New()
	set api."file_id" = fileId
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("getFile", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.File")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="GetMe">
<Description>
A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.GetMe).%New()
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("getMe", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.User")
	}
	
	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="GetUpdates">
<Description>
Use this method to receive incoming updates using long polling (wiki). An Array of Update objects is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>offset:%Integer,limit:%Integer,timeout:%Integer</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.GetUpdates).%New()
    set api.offset = $Get(offset)
    set api.limit = $Get(limit)
    set api.timeout = $Get(timeout)
    
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("getUpdates", api.GenerateMultiformData()))
	
	if (response.ok) {
		set result = ##class(%ListOfObjects).%New()
		set iter = response.result.$getIterator()
   		while iter.$getNext(.key , .value) {
	   		do result.Insert(value.Convert("Telegram.DTO.Objects.Update"))
   		}
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="GetUserProfilePhotos">
<Description>
Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userId:%String,offset:%Integer,limit:%Integer</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.GetUserProfilePhotos).%New()
	set api."user_id" = userId
    set api.offset = $Get(offset)
    set api.limit = $Get(limit)
    
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("getUserProfilePhotos", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.UserProfilePhotos")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="KickChatMember">
<Description>
Use this method to kick a user from a group or a supergroup. In the case of supergroups, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the group for this to work. Returns True on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,userId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.KickChatMember).%New()
	set api."chat_id" = chatId
	set api."user_id" = userId
    
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("kickChatMember", api.GenerateMultiformData()))
	
	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="LeaveChat">
<Description>
Use this method for your bot to leave a group, supergroup or channel. Returns True on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.LeaveChat).%New()
	set api."chat_id" = chatId
    
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("leaveChat", api.GenerateMultiformData()))

	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="SendAudio">
<Description>
Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,duration:%Integer,performer:%String,title:%String,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendAudio).%New()
	set api."chat_id" = chatId
	set api.duration = $Get(duration)
	set api.performer = $Get(performer)
	set api.title = $Get(title)
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
    
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendAudio", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendChatAction">
<Description>
Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,action:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendChatAction).%New()
	set api."chat_id" = chatId
    set api.action = action
    
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendChatAction", api.GenerateMultiformData()))

	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="SendContact">
<Description>
Use this method to send phone contacts. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,phoneNumber:%String,firstName:%String,lastName:%String,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendContact).%New()
    set api."phone_number" = phoneNumber
    set api."first_name" = $Get(firstName)
    set api."last_name" = $Get(lastName)
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendContact", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendDocument">
<Description>
Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,document:%String,caption:%String,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendDocument).%New()
    set api."chat_id" = chatId
    set api.document = document
    set api.caption = $Get(caption)
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendDocument", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendLocation">
<Description>
Use this method to send point on the map. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,latitude:%Float,longitude:%Float,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendLocation).%New()
	set api."chat_id" = chatId
    set api.latitude = latitude
    set api.longitude = longitude
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendLocation", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendMessage">
<Description>
Use this method to send text messages. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,text:%String,parseMode:%String,disableWebPagePreview:%Boolean,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendMessage).%New()
	set api."chat_id" = chatId
    set api.text = text
    set api."parse_mode" = $Get(parseMode)
    set api."disable_web_page_preview" = $Get(disableWebPagePreview)
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)

	set deserializer = ##class(Serializer.JsonDeserializer).%New()
	set response = deserializer.Deserialize(..SendWebRequest("sendMessage", api.GenerateMultiformData()))
	
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendPhoto">
<Description>
Use this method to send photos. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,photo:%String,caption:%String,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendPhoto).%New()
	set api."chat_id" = chatId
    set api.photo = photo
    set api.caption = $Get(caption)
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendPhoto", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendSticker">
<Description>
Use this method to send .webp stickers. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,sticker:%String,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendSticker).%New()
	set api."chat_id" = chatId
    set api.sticker = sticker
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendSticker", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendVenue">
<Description>
Use this method to send information about a venue. On success, the sent Message is returned.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,latitude:%String,longitude:%String,title:%String,address:%String,foursquareId:%String,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendVenue).%New()
	set api."chat_id" = chatId
    set api.latitude = latitude
    set api.longitude = longitude
    set api.title = title
    set api.address = address
    set api."foursquare_id" = $Get(foursquareId)
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendVenue", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendVideo">
<Description>
Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,video:%String,duration:%String,width:%String,height:%String,caption:%String,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendVideo).%New()
	set api."chat_id" = chatId
    set api.video = video
    set api.duration = $Get(duration)
    set api.width = $Get(width)
    set api.height = $Get(height)
    set api.caption = $Get(caption)
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendVideo", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SendVoice">
<Description>
Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,voice:%String,duration:%String,disableNotification:%Boolean,replyToMessageId:%Integer,replyMarkup:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SendVoice).%New()
	set api."chat_id" = chatId
    set api.voice= voice
    set api.duration = $Get(duration)
    set api."disable_notification" = $Get(disableNotification)
    set api."reply_to_message_id" = $Get(replyToMessageId)
    set api."reply_markup" = $Get(replyMarkup)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("sendVoice", api.GenerateMultiformData()))
		
	if (response.ok) {
		set result = response.result.Convert("Telegram.DTO.Objects.Message")
	}

	set response.result = ""
	set response = response.Convert("Telegram.DTO.Objects.ApiResponse")
	set response.result = result
	return response
]]></Implementation>
</Method>

<Method name="SetWebhook">
<Description>
Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String,certificate:%FileBinaryStream</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SetWebhook).%New()
	set api.url = $Get(url)
    set api.certificate = $Get(certificate)
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("setWebhook", api.GenerateMultiformData()))
	
	job ..DeleteLocalhook()
	
	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>

<Method name="DeleteWebhook">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.SetWebhook).%New()
	do ..SendWebRequest("setWebhook", api.GenerateMultiformData())
]]></Implementation>
</Method>

<Method name="UnbanChatMember">
<Description>
Use this method to unban a previously kicked user in a supergroup. The user will not return to the group automatically, but will be able to join via link, etc. The bot must be an administrator in the group for this to work. Returns True on success.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>chatId:%String,userId:%String</FormalSpec>
<ReturnType>Telegram.DTO.Objects.ApiResponse</ReturnType>
<Implementation><![CDATA[
	set api = ##class(Telegram.DTO.Request.UnbanChatMember).%New()
	set api."chat_id" = chatId
	set api."user_id" = userId
	
	set deserializer = ##class(Serializer.JsonDeserializer).%New()	
	set response = deserializer.Deserialize(..SendWebRequest("unbanChatMember", api.GenerateMultiformData()))
	
	return response.Convert("Telegram.DTO.Objects.ApiResponse")
]]></Implementation>
</Method>
</Class>
</Export>
