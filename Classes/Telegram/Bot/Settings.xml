<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Telegram.Bot.Settings">
<Description>
Connection settings to the Telegram Bot Api</Description>
<Super>%Persistent</Super>
<TimeCreated>64131,17480.634683</TimeCreated>

<Property name="Code">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIndex">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Value">
<Type>%String</Type>
</Property>

<Method name="GetValue">
<Description>
Is called to get the settings for the key passed to the method.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try {
		return ##class(Telegram.Bot.Settings).CodeIndexOpen(code).Value
	} catch ex {
		throw ex
	}
]]></Implementation>
</Method>

<Method name="SetValue">
<Description>
Sets the value of the settings for the key passed to the method.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String,value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		set setting = ##class(Telegram.Bot.Settings).CodeIndexOpen(code)
		set setting.Value = value
		do setting.%Save()
		return $$$OK
	} catch ex {
		throw ex
	}
]]></Implementation>
</Method>

<Method name="Init">
<Description>
It is called when the application is initialized and gets the name of the ssl certificate and the Telegram token of the bot.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ssl:%String,token:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		set setting = ##class(Telegram.Bot.Settings).CodeIndexOpen("ssl")
		if setting = "" {
			set setting = ##class(Telegram.Bot.Settings).%New()
			set setting.Code = "ssl"
			set setting.Name = "SSL Sertificate"
		}
		set setting.Value = ssl
		do setting.%Save()
		
		set setting = ##class(Telegram.Bot.Settings).CodeIndexOpen("token")
		if setting = "" {
			set setting = ##class(Telegram.Bot.Settings).%New()
			set setting.Code = "token"
			set setting.Name = "Token Telegram bot"
		}
		set setting.Value = token
		do setting.%Save()
		
		set setting = ##class(Telegram.Bot.Settings).CodeIndexOpen("last")
		if setting = "" {
			set setting = ##class(Telegram.Bot.Settings).%New()
			set setting.Code = "last"
			set setting.Name = "Last updateId"
			set setting.Value = 0
			do setting.%Save()
		}
		
		set setting = ##class(Telegram.Bot.Settings).CodeIndexOpen("local")
		if setting = "" {
			set setting = ##class(Telegram.Bot.Settings).%New()
			set setting.Code = "local"
			set setting.Name = "Local update"
			set setting.Value = 0
			do setting.%Save()
		}
		
		set setting = ##class(Telegram.Bot.Settings).CodeIndexOpen("interval")
		if setting = "" {
			set setting = ##class(Telegram.Bot.Settings).%New()
			set setting.Code = "interval"
			set setting.Name = "Interval server access"
			set setting.Value = 1
			do setting.%Save()
		}
	
		return $$$OK
	} catch ex {
		throw ex
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Telegram.Bot.SettingsD</DataLocation>
<DefaultData>SettingsDefaultData</DefaultData>
<IdLocation>^Telegram.Bot.SettingsD</IdLocation>
<IndexLocation>^Telegram.Bot.SettingsI</IndexLocation>
<StreamLocation>^Telegram.Bot.SettingsS</StreamLocation>
<Data name="SettingsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Code</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Value</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
